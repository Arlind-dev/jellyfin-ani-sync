name: Build and Release

on:
  push:
    branches:
      - shokofix
    #paths:
    #  - 'jellyfin-ani-sync/**'

jobs:
  version:
    runs-on: ubuntu-22.04
    outputs:
      NEXT_VERSION: ${{ steps.determine_version.outputs.next_version }}
      TARGET_ABI: ${{ steps.determine_version.outputs.target_abi }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract and determine version
        id: determine_version
        run: |
          # Define a function to extract the highest version from a given manifest file
          get_highest_version() {
            local manifest_file=$1
            jq -r '.[0].versions | sort_by(.timestamp) | last | .version' "$manifest_file" 2>/dev/null || echo "0.0.0"
          }

          # Get the highest version from each manifest
          BETA_VERSION=$(get_highest_version "./beta-manifest.json")
          MAIN_VERSION=$(get_highest_version "./manifest.json")
          UNSTABLE_VERSION=$(get_highest_version "./unstable-manifest.json")

          # Determine the overall highest version
          LATEST_VERSION=$(echo -e "$BETA_VERSION\n$MAIN_VERSION\n$UNSTABLE_VERSION" | sort -V | tail -n 1)
          BASE_VERSION=${LATEST_VERSION%.*}
          LAST_DIGIT=${LATEST_VERSION##*.}
          NEXT_VERSION="$BASE_VERSION.$((LAST_DIGIT + 1))"

          # Ensure the new version is unique
          while git ls-remote --tags origin | grep -q "refs/tags/v$NEXT_VERSION"; do
            LAST_DIGIT=$((LAST_DIGIT + 1))
            NEXT_VERSION="$BASE_VERSION.$LAST_DIGIT"
          done

          # Extract target ABI from the highest version manifest
          if [[ "$LATEST_VERSION" == "$BETA_VERSION" ]]; then
            TARGET_ABI=$(jq -r '.[0].versions | sort_by(.timestamp) | last | .targetAbi' ./beta-manifest.json)
          elif [[ "$LATEST_VERSION" == "$MAIN_VERSION" ]]; then
            TARGET_ABI=$(jq -r '.[0].versions | sort_by(.timestamp) | last | .targetAbi' ./manifest.json)
          else
            TARGET_ABI=$(jq -r '.[0].versions | sort_by(.timestamp) | last | .targetAbi' ./unstable-manifest.json)
          fi

          # Output the determined values
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "target_abi=$TARGET_ABI" >> $GITHUB_OUTPUT

  build:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build the project with dynamic version
        run: dotnet publish -p:Version=${{ needs.version.outputs.NEXT_VERSION }} --configuration Release

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: jellyfin-ani-sync
          path: ./jellyfin-ani-sync-unit-tests/bin/Release/net9.0/jellyfin-ani-sync.dll

  release:
    runs-on: ubuntu-latest
    needs: [version, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: jellyfin-ani-sync

      - name: Authenticate with GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Create meta.json
        run: |
          cat <<EOL > meta.json
          {
            "category": "General",
            "description": "Synchronize anime watch status between Jellyfin and anime tracking sites.\\n",
            "guid": "c78f11cf-93e6-4423-8c42-d2c255b70e47",
            "name": "Ani-Sync",
            "overview": "Synchronize anime watch status",
            "owner": "vosmiic",
            "targetAbi": "${{ needs.version.outputs.TARGET_ABI }}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "version": "${{ needs.version.outputs.NEXT_VERSION }}"
          }
          EOL

      - name: Create release zip
        run: |
          ZIP_NAME="${{ needs.version.outputs.TARGET_ABI }}.-.ani-sync_${{ needs.version.outputs.NEXT_VERSION }}.zip"
          zip "$ZIP_NAME" jellyfin-ani-sync.dll meta.json
          CHECKSUM=$(md5sum "$ZIP_NAME" | awk '{ print $1 }')
          echo "CHECKSUM=$CHECKSUM" >> $GITHUB_ENV

      - name: Create a new tag and release
        if: needs.version.outputs.NEXT_VERSION != ''
        run: |
          git tag "v${{ needs.version.outputs.NEXT_VERSION }}"
          git push origin "v${{ needs.version.outputs.NEXT_VERSION }}"
          ZIP_NAME="${{ needs.version.outputs.TARGET_ABI }}.-.ani-sync_${{ needs.version.outputs.NEXT_VERSION }}.zip"
          gh release create "v${{ needs.version.outputs.NEXT_VERSION }}" "$ZIP_NAME" --title "Release v${{ needs.version.outputs.NEXT_VERSION }}" --notes "Automated release for version ${{ needs.version.outputs.NEXT_VERSION }}"

      - name: Update fork-manifest.json
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          SOURCE_URL="https://github.com/Arlind-dev/jellyfin-ani-sync/releases/download/v${{ needs.version.outputs.NEXT_VERSION }}/${{ needs.version.outputs.TARGET_ABI }}.-.ani-sync_${{ needs.version.outputs.NEXT_VERSION }}.zip"
          jq --arg checksum "${{ env.CHECKSUM }}" \
             --arg changelog "Automated release for version ${{ needs.version.outputs.NEXT_VERSION }}" \
             --arg targetAbi "${{ needs.version.outputs.TARGET_ABI }}" \
             --arg sourceUrl "$SOURCE_URL" \
             --arg timestamp "$TIMESTAMP" \
             --arg version "${{ needs.version.outputs.NEXT_VERSION }}" \
             '.[0].versions = [{checksum: $checksum, changelog: $changelog, targetAbi: $targetAbi, sourceUrl: $sourceUrl, timestamp: $timestamp, version: $version}] + .[0].versions' \
             fork-manifest.json > updated-manifest.json
          mv updated-manifest.json fork-manifest.json

      - name: Commit and push updated manifest
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add fork-manifest.json
          git commit -m "Update fork-manifest.json for release v${{ needs.version.outputs.NEXT_VERSION }}"
          git push origin shokofix
