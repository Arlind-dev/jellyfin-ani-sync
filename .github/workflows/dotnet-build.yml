name: Build and Release

on:
  push:
    branches:
      - shokofix

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build the project
      run: dotnet publish --configuration Release --output bin

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: jellyfin-ani-sync
        path: ./bin/jellyfin-ani-sync.dll

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: jellyfin-ani-sync

    - name: Install GitHub CLI
      run: sudo apt-get install -y gh

    - name: Authenticate with GitHub CLI
      run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

    - name: Extract and determine version
      id: determine_version
      run: |
        LATEST_VERSION=$(jq -r '.[0].versions | sort_by(.timestamp) | last | .version' ./beta-manifest.json)
        BASE_VERSION=${LATEST_VERSION%.*}
        LAST_DIGIT=${LATEST_VERSION##*.}
        NEXT_VERSION=$LATEST_VERSION

        while gh release view "v$NEXT_VERSION" --json tagName -q '.tagName' &>/dev/null; do
          LAST_DIGIT=$((LAST_DIGIT + 1))
          NEXT_VERSION="$BASE_VERSION.$LAST_DIGIT"
        done

        echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
        echo "::set-output name=next_version::$NEXT_VERSION"

    - name: Create a new tag and release
      run: |
        git tag "v${{ steps.determine_version.outputs.next_version }}"
        git push origin "v${{ steps.determine_version.outputs.next_version }}"
        gh release create "v${{ steps.determine_version.outputs.next_version }}" jellyfin-ani-sync.dll --title "Release v${{ steps.determine_version.outputs.next_version }}" --notes "Automated release for version ${{ steps.determine_version.outputs.next_version }}"

    - name: Update fork-manifest.json
      run: |
        CHECKSUM=$(sha256sum jellyfin-ani-sync.dll | awk '{ print $1 }')
        TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        SOURCE_URL="https://github.com/vosmiic/jellyfin-ani-sync/releases/download/v${{ steps.determine_version.outputs.next_version }}/10.9.11.-.ani-sync_${{ steps.determine_version.outputs.next_version }}.zip"
        NEW_VERSION_ENTRY=$(jq --null-input \
          --arg checksum "$CHECKSUM" \
          --arg changelog "Automated release for version ${{ steps.determine_version.outputs.next_version }}" \
          --arg targetAbi "10.9.11.0" \
          --arg sourceUrl "$SOURCE_URL" \
          --arg timestamp "$TIMESTAMP" \
          --arg version "${{ steps.determine_version.outputs.next_version }}" \
          '{checksum: $checksum, changelog: $changelog, targetAbi: $targetAbi, sourceUrl: $sourceUrl, timestamp: $timestamp, version: $version}')
        jq '.[] | .versions += [$NEW_VERSION_ENTRY]' fork-manifest.json > updated-manifest.json
        mv updated-manifest.json fork-manifest.json

    - name: Commit and push updated manifest
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add fork-manifest.json
        git commit -m "Update fork-manifest.json for release v${{ steps.determine_version.outputs.next_version }}"
        git push origin shokofix
