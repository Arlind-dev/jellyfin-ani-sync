name: Build Docker Container

on:
  push:
    branches: ['master']
    tags: ["v*.*"]
  pull_request:
    branches: ["master"]
  schedule:
    - cron: '0 0 * * *' # Runs daily at 12 AM UTC (builds nightly)

env:
  REGISTRY: ghcr.io

permissions:
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Convert image name to lowercase
        run: |
          GITHUB_REPOSITORY="${{ github.repository }}"
          echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: image=moby/buildkit:rootless

      - name: Log into registry ${{ env.REGISTRY }}
        if: ${{ !github.event.pull_request || github.event.pull_request.base.repo.full_name == github.event.pull_request.head.repo.full_name }}
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # nightly builds
            type=raw,value=nightly,enable=${{ github.ref == 'refs/heads/master' || github.event_name == 'schedule' }}
            # semver release tags (vX.Y.Z)
            type=semver,pattern={{version}}
            type=semver,pattern=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            # sha for all commits
            type=sha

      - name: Build and push multi-platform Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha,scope=${{ github.ref_name }}
          cache-to: type=gha,scope=${{ github.ref_name }},mode=max
          platforms: linux/amd64,linux/arm64/v8
          provenance: true
          sbom: true
          push: ${{ !github.event.pull_request || github.event.pull_request.base.repo.full_name == github.event.pull_request.head.repo.full_name }}

      - name: Annotate manifest list
        if: ${{ !github.event.pull_request || github.event.pull_request.base.repo.full_name == github.event.pull_request.head.repo.full_name }}
        run: |
          docker buildx imagetools create \
            --append \
            --annotation "org.opencontainers.image.description=Synchronize anime watch status between Jellyfin and anime tracking sites." \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:%s ' $(jq -r '.tags[]' <<< "$DOCKER_METADATA_OUTPUT_JSON"))
